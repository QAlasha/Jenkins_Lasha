{"name": "Successful fill form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '\"#firstName\"')).set value: Alex\n\nReason: InvalidSelectorException: Message: invalid selector: An invalid or illegal selector was specified\n  (Session info: chrome=113.0.5672.126)\nStacktrace:\n0   chromedriver                        0x000000010525f8ac chromedriver + 4257964\n1   chromedriver                        0x0000000105257f40 chromedriver + 4226880\n2   chromedriver                        0x0000000104e949d4 chromedriver + 281044\n3   chromedriver                        0x0000000104e99200 chromedriver + 299520\n4   chromedriver                        0x0000000104e9ab34 chromedriver + 305972\n5   chromedriver                        0x0000000104e9ac24 chromedriver + 306212\n6   chromedriver                        0x0000000104ecf718 chromedriver + 522008\n7   chromedriver                        0x0000000104f067e4 chromedriver + 747492\n8   chromedriver                        0x0000000104ec398c chromedriver + 473484\n9   chromedriver                        0x0000000104ec498c chromedriver + 477580\n10  chromedriver                        0x000000010521e900 chromedriver + 3991808\n11  chromedriver                        0x0000000105222354 chromedriver + 4006740\n12  chromedriver                        0x0000000105222940 chromedriver + 4008256\n13  chromedriver                        0x000000010522833c chromedriver + 4031292\n14  chromedriver                        0x0000000105222f34 chromedriver + 4009780\n15  chromedriver                        0x00000001051fb490 chromedriver + 3847312\n16  chromedriver                        0x00000001052409f4 chromedriver + 4131316\n17  chromedriver                        0x0000000105240b4c chromedriver + 4131660\n18  chromedriver                        0x0000000105251230 chromedriver + 4198960\n19  libsystem_pthread.dylib             0x00000001ab6a3fa8 _pthread_start + 148\n20  libsystem_pthread.dylib             0x00000001ab69eda0 thread_start + 8\n\nScreenshot: file:///Users/lasha/.selene/screenshots/1685188306417/1685188306417.png\nPageSource: file:///Users/lasha/.selene/screenshots/1685188306417/1685188306417.html", "trace": "fn = <selene.core.wait.Command object at 0x10583ad90>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n../../venv/lib/python3.11/site-packages/selene/core/wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selene.core.wait.Command object at 0x10583ad90>\nentity = <selene.core.entity.Element object at 0x104cfec10>\n\n    def __call__(self, entity: E) -> R:\n>       return self._fn(entity)\n\n../../venv/lib/python3.11/site-packages/selene/core/wait.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nelement = <selene.core.entity.Element object at 0x104cfec10>\n\n    def fn(element: Element):\n        webelement = (\n            element._actual_not_overlapped_webelement\n            if self.config.wait_for_no_overlap_found_by_js\n>           else element()\n        )\n\n../../venv/lib/python3.11/site-packages/selene/core/entity.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selene.core.entity.Element object at 0x104cfec10>\n\n    def __call__(self) -> WebElement:\n>       return self.locate()\n\n../../venv/lib/python3.11/site-packages/selene/core/entity.py:196: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selene.core.entity.Element object at 0x104cfec10>\n\n    def locate(self) -> WebElement:\n>       return self._locator()\n\n../../venv/lib/python3.11/site-packages/selene/core/entity.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selene.core.locator.Locator object at 0x104ca4f90>\n\n    def __call__(self) -> T:\n>       return self._locate()\n\n../../venv/lib/python3.11/site-packages/selene/core/locator.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>       Locator(f'{self}.element({by})', lambda: self.driver.find_element(*by)),\n        self.config,\n    )\n\n../../venv/lib/python3.11/site-packages/selene/core/entity.py:1132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6c26065ae8c60805394f5fe3a0a996e7\")>\nby = 'css selector', value = '\"#firstName\"'\n\n    def find_element(self, by=By.ID, value: Optional[str] = None) -> WebElement:\n        \"\"\"Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = f'[id=\"{value}\"]'\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = f\".{value}\"\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = f'[name=\"{value}\"]'\n    \n>       return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n\n../../venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:831: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6c26065ae8c60805394f5fe3a0a996e7\")>\ndriver_command = 'findElement'\nparams = {'using': 'css selector', 'value': '\"#firstName\"'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n../../venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x104374a50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector: An invalid or illegal sele...0001ab6a3fa8 _pthread_start + 148\\\\n20  libsystem_pthread.dylib             0x00000001ab69eda0 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: An invalid or illegal selector was specified\nE         (Session info: chrome=113.0.5672.126)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010525f8ac chromedriver + 4257964\nE       1   chromedriver                        0x0000000105257f40 chromedriver + 4226880\nE       2   chromedriver                        0x0000000104e949d4 chromedriver + 281044\nE       3   chromedriver                        0x0000000104e99200 chromedriver + 299520\nE       4   chromedriver                        0x0000000104e9ab34 chromedriver + 305972\nE       5   chromedriver                        0x0000000104e9ac24 chromedriver + 306212\nE       6   chromedriver                        0x0000000104ecf718 chromedriver + 522008\nE       7   chromedriver                        0x0000000104f067e4 chromedriver + 747492\nE       8   chromedriver                        0x0000000104ec398c chromedriver + 473484\nE       9   chromedriver                        0x0000000104ec498c chromedriver + 477580\nE       10  chromedriver                        0x000000010521e900 chromedriver + 3991808\nE       11  chromedriver                        0x0000000105222354 chromedriver + 4006740\nE       12  chromedriver                        0x0000000105222940 chromedriver + 4008256\nE       13  chromedriver                        0x000000010522833c chromedriver + 4031292\nE       14  chromedriver                        0x0000000105222f34 chromedriver + 4009780\nE       15  chromedriver                        0x00000001051fb490 chromedriver + 3847312\nE       16  chromedriver                        0x00000001052409f4 chromedriver + 4131316\nE       17  chromedriver                        0x0000000105240b4c chromedriver + 4131660\nE       18  chromedriver                        0x0000000105251230 chromedriver + 4198960\nE       19  libsystem_pthread.dylib             0x00000001ab6a3fa8 _pthread_start + 148\nE       20  libsystem_pthread.dylib             0x00000001ab69eda0 thread_start + 8\n\n../../venv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: InvalidSelectorException\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.title(\"Successful fill form\")\n    def test_successful():\n        # browser = setup_browser\n        first_name = \"Alex\"\n        last_name = \"Egorov\"\n    \n        with allure.step(\"Open registrations form\"):\n            browser.open(\"https://demoqa.com/automation-practice-form\")\n            browser.element(\".practice-form-wrapper\").should(have.text(\"Student Registration Form\"))\n            browser.driver.execute_script(\"$('footer').remove()\")\n            browser.driver.execute_script(\"$('#fixedban').remove()\")\n    \n        with allure.step(\"Fill form\"):\n>           browser.element(RegisterLocator.FIRST_NAME).set_value(first_name)\n\ntest_registration.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../venv/lib/python3.11/site-packages/selene/core/entity.py:358: in set_value\n    self.wait.for_(\n../../venv/lib/python3.11/site-packages/selene/core/wait.py:143: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <selene.core.wait.Command object at 0x10583ad90>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '\"#firstName\"')).set value: Alex\nE                   \nE                   Reason: InvalidSelectorException: Message: invalid selector: An invalid or illegal selector was specified\nE                     (Session info: chrome=113.0.5672.126)\nE                   Stacktrace:\nE                   0   chromedriver                        0x000000010525f8ac chromedriver + 4257964\nE                   1   chromedriver                        0x0000000105257f40 chromedriver + 4226880\nE                   2   chromedriver                        0x0000000104e949d4 chromedriver + 281044\nE                   3   chromedriver                        0x0000000104e99200 chromedriver + 299520\nE                   4   chromedriver                        0x0000000104e9ab34 chromedriver + 305972\nE                   5   chromedriver                        0x0000000104e9ac24 chromedriver + 306212\nE                   6   chromedriver                        0x0000000104ecf718 chromedriver + 522008\nE                   7   chromedriver                        0x0000000104f067e4 chromedriver + 747492\nE                   8   chromedriver                        0x0000000104ec398c chromedriver + 473484\nE                   9   chromedriver                        0x0000000104ec498c chromedriver + 477580\nE                   10  chromedriver                        0x000000010521e900 chromedriver + 3991808\nE                   11  chromedriver                        0x0000000105222354 chromedriver + 4006740\nE                   12  chromedriver                        0x0000000105222940 chromedriver + 4008256\nE                   13  chromedriver                        0x000000010522833c chromedriver + 4031292\nE                   14  chromedriver                        0x0000000105222f34 chromedriver + 4009780\nE                   15  chromedriver                        0x00000001051fb490 chromedriver + 3847312\nE                   16  chromedriver                        0x00000001052409f4 chromedriver + 4131316\nE                   17  chromedriver                        0x0000000105240b4c chromedriver + 4131660\nE                   18  chromedriver                        0x0000000105251230 chromedriver + 4198960\nE                   19  libsystem_pthread.dylib             0x00000001ab6a3fa8 _pthread_start + 148\nE                   20  libsystem_pthread.dylib             0x00000001ab69eda0 thread_start + 8\nE                   \nE                   Screenshot: file:///Users/lasha/.selene/screenshots/1685188306417/1685188306417.png\nE                   PageSource: file:///Users/lasha/.selene/screenshots/1685188306417/1685188306417.html\n\n../../venv/lib/python3.11/site-packages/selene/core/wait.py:141: TimeoutException"}, "steps": [{"name": "Open registrations form", "status": "passed", "start": 1685188306440, "stop": 1685188336964}, {"name": "Fill form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '\"#firstName\"')).set value: Alex\n\nReason: InvalidSelectorException: Message: invalid selector: An invalid or illegal selector was specified\n  (Session info: chrome=113.0.5672.126)\nStacktrace:\n0   chromedriver                        0x000000010525f8ac chromedriver + 4257964\n1   chromedriver                        0x0000000105257f40 chromedriver + 4226880\n2   chromedriver                        0x0000000104e949d4 chromedriver + 281044\n3   chromedriver                        0x0000000104e99200 chromedriver + 299520\n4   chromedriver                        0x0000000104e9ab34 chromedriver + 305972\n5   chromedriver                        0x0000000104e9ac24 chromedriver + 306212\n6   chromedriver                        0x0000000104ecf718 chromedriver + 522008\n7   chromedriver                        0x0000000104f067e4 chromedriver + 747492\n8   chromedriver                        0x0000000104ec398c chromedriver + 473484\n9   chromedriver                        0x0000000104ec498c chromedriver + 477580\n10  chromedriver                        0x000000010521e900 chromedriver + 3991808\n11  chromedriver                        0x0000000105222354 chromedriver + 4006740\n12  chromedriver                        0x0000000105222940 chromedriver + 4008256\n13  chromedriver                        0x000000010522833c chromedriver + 4031292\n14  chromedriver                        0x0000000105222f34 chromedriver + 4009780\n15  chromedriver                        0x00000001051fb490 chromedriver + 3847312\n16  chromedriver                        0x00000001052409f4 chromedriver + 4131316\n17  chromedriver                        0x0000000105240b4c chromedriver + 4131660\n18  chromedriver                        0x0000000105251230 chromedriver + 4198960\n19  libsystem_pthread.dylib             0x00000001ab6a3fa8 _pthread_start + 148\n20  libsystem_pthread.dylib             0x00000001ab69eda0 thread_start + 8\n\nScreenshot: file:///Users/lasha/.selene/screenshots/1685188306417/1685188306417.png\nPageSource: file:///Users/lasha/.selene/screenshots/1685188306417/1685188306417.html\n\n", "trace": "  File \"/Users/lasha/PycharmProjects/Jenkins_Lasha/tests/test_demoga/test_registration.py\", line 18, in test_successful\n    browser.element(RegisterLocator.FIRST_NAME).set_value(first_name)\n  File \"/Users/lasha/PycharmProjects/Jenkins_Lasha/venv/lib/python3.11/site-packages/selene/core/entity.py\", line 358, in set_value\n    self.wait.for_(\n  File \"/Users/lasha/PycharmProjects/Jenkins_Lasha/venv/lib/python3.11/site-packages/selene/core/wait.py\", line 143, in for_\n    return self._decorator(self)(logic)(fn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/lasha/PycharmProjects/Jenkins_Lasha/venv/lib/python3.11/site-packages/selene/core/wait.py\", line 141, in logic\n    raise self._hook_failure(failure)\n"}, "start": 1685188336964, "stop": 1685188341133}], "start": 1685188306440, "stop": 1685188341136, "uuid": "081ba9c6-4399-41c7-9c0f-952edd25f182", "historyId": "b948c5c73c4a8b553444e0b9a736398c", "testCaseId": "b948c5c73c4a8b553444e0b9a736398c", "fullName": "tests.test_demoga.test_registration#test_successful", "labels": [{"name": "parentSuite", "value": "tests.test_demoga"}, {"name": "suite", "value": "test_registration"}, {"name": "host", "value": "MacBook-Air-Lasha.local"}, {"name": "thread", "value": "61654-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_demoga.test_registration"}]}